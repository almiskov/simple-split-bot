package splitter

import (
	"fmt"
	"regexp"
	"strings"
	"unicode/utf8"
)

const (
	instaNL = "\n‚†Ä\n"
)

type splitter struct {
	leadingSize, regularSize int
	pageTmpl, nextTmpl       string
	nextTmplLen              int
	leadingPageAddition      string
}

func New(opts ...splitterOpt) *splitter {
	const (
		defaultLeading             = 2200
		defaultRegular             = 1000
		defaultPageTmpl            = "‚ùó%d‚ùó"
		defaultNextTmpl            = "üëáüëáüëá"
		defaultLeadingPageAddition = ""
	)

	s := &splitter{
		leadingSize:         defaultLeading,
		regularSize:         defaultRegular,
		pageTmpl:            defaultPageTmpl,
		nextTmpl:            defaultNextTmpl,
		leadingPageAddition: defaultLeadingPageAddition,
	}

	for _, opt := range opts {
		opt(s)
	}

	s.nextTmplLen = utf8.RuneCountInString(s.nextTmpl)

	return s
}

/*
breakText —Ä–∞–∑–±–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–∏–º–≤–æ–ª–∞–º (—Å–º. switch-case).
–û–±—Ä–µ–∑–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–∞–∂–¥–æ–º –∫—É—Å–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤ —Ç–æ–º –∂–µ –∫—É—Å–∫–µ,
–ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
*/
func (s *splitter) breakText(text string) []string {
	var (
		parts      = make([]string, 0)
		start, end = 0, 0
	)

	for i, r := range text {
		switch r {
		case '.', ',', '!', '?', ';', ':', '‚Äî':
			end = i + utf8.RuneLen(r)
			parts = append(parts, strings.TrimLeft(text[start:end], " "))
			start = end
		}
	}

	return append(parts, strings.TrimLeft(text[start:], " "))
}

var brakeReg = regexp.MustCompile(`[.|,|!|?|;|:|‚Äî]+\s`)

/*
breakTextReg —Ä–∞–∑–±–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Ä–µ–≥—É–ª—è—Ä–∫–µ, –ø–æ –∫–æ–Ω
*/
func (s *splitter) breakTextReg(text string) []string {
	idxs := brakeReg.FindAllStringIndex(text, -1)

	parts := make([]string, 0)
	start, end := 0, 0

	for _, p := range idxs {
		end = p[1]
		parts = append(parts, strings.Trim(text[start:end], " "))
		start = end
	}

	return append(parts, strings.Trim(text[start:], " "))
}

func (s *splitter) aggregatePartsToPages(parts []string) []string {
	var (
		pages         = make([]string, 0)
		curPageLength = utf8.RuneCountInString(s.leadingPageAddition + instaNL)
	)

	// —Å–æ–±–∏—Ä–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
	for i, part := range parts {
		curPageLength += utf8.RuneCountInString(part)
		if curPageLength+i+s.nextTmplLen > s.leadingSize {
			pages = append(pages, strings.Join(parts[:i], " ")+s.leadingPageAddition+s.nextTmpl)
			parts = parts[i:]
			curPageLength = 0
			break
		}
	}

	var (
		pageTitle    string
		pageTitleLen int
	)

	// —Å–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	for i := 0; i < len(parts); i++ {
		if i == 0 {
			pageTitle = fmt.Sprintf(s.pageTmpl, len(pages))
			pageTitleLen = utf8.RuneCountInString(pageTitle)
		}

		curPageLength += utf8.RuneCountInString(parts[i])

		if pageTitleLen+curPageLength+i+s.nextTmplLen > s.regularSize {
			pages = append(pages, pageTitle+strings.Join(parts[:i], " ")+s.nextTmpl)

			parts = parts[i:]
			curPageLength = 0
			i = -1 // –¥–∞–ª—å—à–µ i++ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –µ–≥–æ –≤ 0
		}
	}

	// –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
	return append(pages, pageTitle+strings.Join(parts, " "))
}

func (s *splitter) replaceNewLines(text string) string {
	return strings.NewReplacer("\n\n", instaNL, "\r\n\r\n", instaNL).Replace(text)
}

/*
Split —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ –±–æ–ª–µ–µ leadingSize –∏ regularSize,
–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–π)
–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
*/
func (s *splitter) Split(text string) []string {
	text = s.replaceNewLines(text)

	if utf8.RuneCountInString(text)+utf8.RuneCountInString(s.leadingPageAddition) <= s.leadingSize {
		return []string{text + s.leadingPageAddition}
	}

	var (
		parts      = s.breakTextReg(text)
		paragraphs = s.aggregatePartsToPages(parts)
	)

	return paragraphs
}
